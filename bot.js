const { Telegraf } = require('telegraf');
const dotenv = require('dotenv');
const botResponse = require("./index.js");
const fs = require('fs');
const axios = require('axios');
const Tesseract = require('tesseract.js'); // Ensure Tesseract.js is installed
dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);

const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD;
let userStates = {};
let users = new Set();

// –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª user_logs.txt
function logMessageToFile(username, userMessage, botResponse) {
    const logMessage = `–ò–º—è: ${username}, –°–æ–æ–±—â–µ–Ω–∏–µ: ${userMessage}, –û—Ç–≤–µ—Ç –±–æ—Ç–∞: ${botResponse}\n`;
    fs.appendFileSync('./logs/users_logs.txt', logMessage, 'utf8');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async function sendLogsToAdmin(ctx) {
    const filePath = './logs/users_logs.txt';
    try {
        await ctx.replyWithDocument({ source: filePath });
        fs.unlinkSync(filePath); // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤.');
    }
}

// –ù–∞—á–∞–ª–æ –±–æ—Ç–∞
bot.start((ctx) => {
    const userId = ctx.chat.id;
    users.add(userId);
    ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å SilkWay Cargo. –¢–∞–∫–∂–µ, —è –ø—Ä–æ–≤–µ—Ä—è—é –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–∫–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö, –∫–∞–∫: Pinduoduo, 1688, Alibaba, Taobao', {
        reply_markup: {
            keyboard: [
                [
                    { text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å' },
                    { text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞' },
                ],
                [{ text: '–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º' }],
                [{ text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è' }, { text: '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è' }]
            ],
            resize_keyboard: true,
        }
    });
});

// /admin
bot.command('admin', (ctx) => {
    const userId = ctx.chat.id;
    userStates[userId] = 'awaiting_admin_code';
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:');
});

// –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤–≤–µ–¥–µ–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
bot.on('text', async (ctx) => {
    const userId = ctx.chat.id;
    const userMessage = ctx.message.text;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω —Ç–æ–∫–µ–Ω–∞
    if (userStates[userId] === 'awaiting_admin_code') {
        if (userMessage === ADMIN_PASSWORD) {
            userStates[userId] = 'admin';
            return showAdminPanel(ctx);
        } else {
            return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    }
     if (userStates[userId] === 'awaiting_client_code') {
                userStates[userId].clientCode = userMessage; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞
                userStates[userId] = 'checking_address'; // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
                return ctx.reply(`–ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ "${userMessage}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞.`);
            }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏
    if (userStates[userId] === 'sending_news') {
        const newsMessage = userMessage;
        userStates[userId] = 'admin';
        await ctx.reply('–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.');

        await handleNewsBroadcast(ctx, newsMessage);
        return showAdminPanel(ctx); 
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç—É
    switch (userMessage) {
        case '–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º':
            return ctx.reply('–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: https://wa.me/1234567890');
        case '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è':
            return ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!');
        case '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è':
            return ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!');
        case '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':
            userStates[userId] = 'asking_question';
            return ctx.reply('–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.');
        case '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞':
            userStates[userId] = 'awaiting_client_code'; // –û–∂–∏–¥–∞–µ–º –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞
            ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞.');
            break;

        default:
            if (userStates[userId] === 'asking_question') {
                try {
                    const response = await botResponse(userMessage);                
                    logMessageToFile(ctx.message.chat.first_name, userMessage, response);
                    return ctx.reply(response, {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }], 
                                [{ text: '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', url: 'https://wa.me/1234567890' }]
                            ],
                        },
                    });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –≤ botResponse:', error);
                    return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.');
                }
            }



            return ctx.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
bot.on('photo', async (ctx) => {
    const userId = ctx.chat.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –±—ã–ª –≤–≤–µ–¥–µ–Ω
    if (userStates[userId] === 'checking_address' && userStates[userId].clientCode) {
        try {
            await ctx.reply('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
            const photo = ctx.message.photo[ctx.message.photo.length - 1];
            const fileId = photo.file_id;
            const fileLink = await ctx.telegram.getFileLink(fileId);

            // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
            const filePath = `temp_image_${Date.now()}.jpg`;
            const response = await axios.get(fileLink.href, { responseType: 'stream' });
            const writer = fs.createWriteStream(filePath);
            response.data.pipe(writer);

            await new Promise((resolve, reject) => {
                writer.on('finish', resolve);
                writer.on('error', reject);
            });

            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ OCR —Å Tesseract.js
            const { data: { text } } = await Tesseract.recognize(filePath, 'chi_tra'); // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'chi_tra' –¥–ª—è –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏
            fs.unlinkSync(filePath); // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

            await ctx.reply(`–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n"${text.trim()}"`);

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
            if (validateAddress(userStates[userId].clientCode, text)) {
                return ctx.reply('–ê–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
            } else {
                return ctx.reply('–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –∞–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ.');
            }
        } catch (error) {
            console.error(error);
            return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
        }
    } else {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞.');
    }
});

// –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞–¥–µ—é—Å—å –ø–æ–Ω—è—Ç–Ω–æ...
function showAdminPanel(ctx) {
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π', callback_data: 'send_news' }],
                [{ text: 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'list_users' }],
                [{ text: '‚úâ –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏', callback_data: 'logs' }],
                [{ text: 'üîô –í—ã–π—Ç–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏', callback_data: 'exit_admin' }],
            ],
        },
    });
}

function validateAddress(clientCode, extractedText) {
    // –õ–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º clientCode –∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if (extractedText.includes(clientCode)) {
        return true;
    } else {
        return false;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —à—Ç—É–∫ —Å–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on('callback_query', async (ctx) => {
    const userId = ctx.chat.id;
    const option = ctx.callbackQuery.data;

    if (userStates[userId] !== 'admin') {
        return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
    }

    switch (option) {
        case 'send_news':
            userStates[userId] = 'sending_news';
            return ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:');
        case 'logs':
            return sendLogsToAdmin(ctx);
        case 'list_users':
            return ctx.reply(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}`);
        case 'exit_admin':
            userStates[userId] = null;
            return ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
        default:
            return ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function handleNewsBroadcast(ctx, message) {
    let successCount = 0;
    let failCount = 0;

    for (const userId of users) {
        try {
            await ctx.telegram.sendMessage(userId, `üì¢ –ù–æ–≤–æ—Å—Ç–∏:\n${message}`);
            successCount++;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
            failCount++;
        }
    }

    ctx.reply(`–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${failCount}`);
}

// –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
});
